// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const SquareVerifier = artifacts.require("SquareVerifier");
const jsonProof = require("../../zokrates/code/square/proof.json");

let owner;
const values = Object.values(jsonProof.proof);

contract("TestERC721Mintable", (accts) => {
  owner = accts[0];

  beforeEach(async () => {
    this.contract = await SquareVerifier.new({ from: owner });
  });

  // Test verification with correct proof
  // - use the contents from proof.json generated from zokrates steps
  it("verifies with correct proof", async () => {
    const result = await this.contract.verifyTx.call(
      ...values,
      jsonProof.inputs
    );

    assert.equal(result, true, "Verification failed");
  });

  // Test verification with incorrect proof
  it("fails with correct proof", async () => {
    const incorrectInputs = [531, 900];
    const result = await this.contract.verifyTx.call(
      ...values,
      incorrectInputs
    );

    assert.equal(result, false, "Verification with incorrect proof passed");
  });
});
